# See LICENSE for license details.
#*****************************************************************************
# smul8.S
#-----------------------------------------------------------------------------
#
# Test add instruction.
#


#include "riscv_test.h"
#include "compliance_test.h"
#include "compliance_io.h"
#include "aw_test_macros.h"

RVTEST_RV64U
RV_COMPLIANCE_CODE_BEGIN

  #-------------------------------------------------------------
  # Arithmetic tests
  #-------------------------------------------------------------

TEST_RR_OP64_OO( 2 , smul8, 0x0000008030000360, 0x00ff8024, 0x8080a018 , 8); 
TEST_RR_OP64_OO( 3 , smul8, 0xf600000000000000, 0x808000ff, 0x14000000 , 16); 
TEST_RR_OP64_OO( 4 , smul8, 0x0001000000800900, 0xff00ffee, 0xff808080 , 24); 
TEST_RR_OP64_OO( 5 , smul8, 0x000000800007e180, 0x00fff980, 0x0080ff3d , 32); 
TEST_RR_OP64_OO( 6 , smul8, 0x000000800000ff84, 0xff8000ff, 0x00ff807c , 40); 
TEST_RR_OP64_OO( 7 , smul8, 0x0080ffc440000000, 0x803c8000, 0xffff80ff , 48); 
TEST_RR_OP64_OO( 8 , smul8, 0x0080000000440780, 0xffffff80, 0x8000bcf1 , 56); 
TEST_RR_OP64_OO( 9 , smul8, 0xe100000010000001, 0x808080ff, 0x3e00e0ff , 64); 
TEST_RR_OP64_OO( 10 , smul8, 0x400000010000ffd0, 0x80ff00ff, 0x80ffd030 , 72); 
TEST_RR_OP64_OO( 11 , smul8, 0x4000000000000080, 0x80800080, 0x800000ff , 80); 
TEST_RR_OP64_OO( 12 , smul8, 0x0080002e004433ae, 0x80d2ff97, 0xffffbc82 , 88); 
TEST_RR_OP64_OO( 13 , smul8, 0xf7cc000000000001, 0xeb0000ff, 0x64ffffff , 96); 
TEST_RR_OP64_OO( 14 , smul8, 0x000000000001ca00, 0x0080ff6c, 0x8000ff80 , 104); 
TEST_RR_OP64_OO( 15 , smul8, 0x3d00ffed16000001, 0x8013d4ff, 0x86ff80ff , 112); 
TEST_RR_OP64_OO( 16 , smul8, 0xfc73000000000000, 0x9bff0000, 0x09008000 , 120); 
TEST_RR_OP64_OO( 17 , smul8, 0xd500ffdcf7e00000, 0x56ff1400, 0x80249896 , 128); 
TEST_RR_OP64_OO( 18 , smul8, 0x0000e70000050000, 0x6432fb80, 0x0080ff00 , 136); 
TEST_RR_OP64_OO( 19 , smul8, 0x0012ff5f00800000, 0xeef9ff80, 0xff178000 , 144); 
TEST_RR_OP64_OO( 20 , smul8, 0x0000108021b00000, 0xf3df6200, 0x0080589f , 152); 
TEST_RR_OP64_OO( 21 , smul8, 0x0001000000000000, 0xff000000, 0xffbbff00 , 160); 
TEST_RR_OP64_OO( 22 , smul8, 0xff8e000000001700, 0xff000080, 0x72a774d2 , 168); 
TEST_RR_OP64_OO( 23 , smul8, 0x4000000000630000, 0x80009d00, 0x8080ff00 , 176); 
TEST_RR_OP64_OO( 24 , smul8, 0x2680ff94ff960080, 0x806cffff, 0xb3ff6a80 , 184); 
TEST_RR_OP64_OO( 25 , smul8, 0x0000000000000001, 0x000080ff, 0xff7f00ff , 192); 
TEST_RR_OP64_OO( 26 , smul8, 0x0000008000000d00, 0x00803b80, 0x80ff00e6 , 200); 
TEST_RR_OP64_OO( 27 , smul8, 0xffaf000026000000, 0xff808000, 0x5100b480 , 208); 
TEST_RR_OP64_OO( 28 , smul8, 0x0021000000000001, 0xffff00ff, 0xdf00ffff , 216); 
TEST_RR_OP64_OO( 29 , smul8, 0x0000000000800000, 0x00ffff00, 0x4c008080 , 224); 
TEST_RR_OP64_OO( 30 , smul8, 0x0c7e000100000000, 0x29ff0000, 0x4eff80ba , 232); 
TEST_RR_OP64_OO( 31 , smul8, 0x0150ff9b00800000, 0xd6ff80ff, 0xf865ff00 , 240); 
TEST_RR_OP64_OO( 32 , smul8, 0x11003a800000ffa9, 0x80800057, 0xde8b80ff , 248); 
TEST_RR_OP64_OO( 33 , smul8, 0x0080000000000000, 0x80008000, 0xff000000 , 256); 
TEST_RR_OP64_OO( 34 , smul8, 0x00000080ff970000, 0xe08069ff, 0x00ffff00 , 264); 
TEST_RR_OP64_OO( 35 , smul8, 0x00000000ffcc0000, 0x005934ff, 0x0000ff00 , 272); 
TEST_RR_OP64_OO( 36 , smul8, 0xf800000000010000, 0x10ffff00, 0x8000ff00 , 280); 
TEST_RR_OP64_OO( 37 , smul8, 0x0000000000000000, 0x80002000, 0x00800080 , 288); 
TEST_RR_OP64_OO( 38 , smul8, 0x0000000000000000, 0xf1ffff9b, 0x00000000 , 296); 
TEST_RR_OP64_OO( 39 , smul8, 0xe48000800a000000, 0x80ff80ff, 0x3780ec00 , 304); 
TEST_RR_OP64_OO( 40 , smul8, 0x0000ffe940000d00, 0xffff80e6, 0x00178080 , 312); 
TEST_RR_OP64_OO( 41 , smul8, 0xc080dc8040000000, 0x7f4780ff, 0x80808000 , 320); 
TEST_RR_OP64_OO( 42 , smul8, 0x00000000000009f6, 0x007f8b1e, 0x80000055 , 328); 
TEST_RR_OP64_OO( 43 , smul8, 0x00001580eb800000, 0x00d5295d, 0x00808000 , 336); 
TEST_RR_OP64_OO( 44 , smul8, 0xfc73008005ca0000, 0xf780da00, 0x65ffd9ff , 344); 
TEST_RR_OP64_OO( 45 , smul8, 0x40000000001c0080, 0x8080e480, 0x8000ffff , 352); 
TEST_RR_OP64_OO( 46 , smul8, 0x00000000d9b70000, 0x00805180, 0x6d008700 , 360); 
TEST_RR_OP64_OO( 47 , smul8, 0x00000001ffe54000, 0x00ff1b80, 0x2bffff80 , 368); 
TEST_RR_OP64_OO( 48 , smul8, 0x00000001cc00ffd7, 0x00ff80ff, 0xb4ff6829 , 376); 
TEST_RR_OP64_OO( 49 , smul8, 0xf2a4000000800055, 0x7280ffff, 0xe20080ab , 384); 
TEST_RR_OP64_OO( 50 , smul8, 0x0080dc8036800000, 0xff478080, 0x80809300 , 392); 
TEST_RR_OP64_OO( 51 , smul8, 0xf080000000000080, 0x1f000080, 0x80ffffff , 400); 
TEST_RR_OP64_OO( 52 , smul8, 0x008000004000db00, 0x8000804a, 0xff008080 , 408); 
TEST_RR_OP64_OO( 53 , smul8, 0x0080003400000000, 0x80feff80, 0xffe60000 , 416); 
TEST_RR_OP64_OO( 54 , smul8, 0x0000f0e2de800000, 0x002d8000, 0x00aa4300 , 424); 
TEST_RR_OP64_OO( 55 , smul8, 0x0000fff3005c0000, 0x000da400, 0x70ffff00 , 432); 
TEST_RR_OP64_OO( 56 , smul8, 0x000a4000d5000080, 0xf68056ff, 0xff808080 , 440); 
TEST_RR_OP64_OO( 57 , smul8, 0x0080000000010044, 0xffffffff, 0x8000ffbc , 448); 
TEST_RR_OP64_OO( 58 , smul8, 0x0001400000800000, 0xff8080ff, 0xff80ff00 , 456); 
TEST_RR_OP64_OO( 59 , smul8, 0x0000198000002880, 0xf08000af, 0x00cdff80 , 464); 
TEST_RR_OP64_OO( 60 , smul8, 0x4000000040002400, 0x800380b8, 0x80008080 , 472); 
TEST_RR_OP64_OO( 61 , smul8, 0x0000400000800000, 0xdb80ff00, 0x00808080 , 480); 
TEST_RR_OP64_OO( 62 , smul8, 0x00104000e780fd42, 0xff8080f7, 0xf080314e , 488); 
TEST_RR_OP64_OO( 63 , smul8, 0x3580007ce1804000, 0x80843d80, 0x95ff8080 , 496); 
TEST_RR_OP64_OO( 64 , smul8, 0xffd2d900ff800069, 0x2e4e01ff, 0xff808097 , 504); 
TEST_RR_OP64_OO( 65 , smul8, 0xf200000000000000, 0x80000000, 0x1c32a0d8 , 512); 
TEST_RR_OP64_OO( 66 , smul8, 0x40000000ff990000, 0x80ffff00, 0x80006700 , 520); 
TEST_RR_OP64_OO( 67 , smul8, 0x0000005b005b0000, 0x00ffa5ff, 0x00a5ff00 , 528); 
TEST_RR_OP64_OO( 68 , smul8, 0xc6800c8000000001, 0x808000ff, 0x73e749ff , 536); 
TEST_RR_OP64_OO( 69 , smul8, 0x4000018000004000, 0x80808080, 0x80fd0080 , 544); 
TEST_RR_OP64_OO( 70 , smul8, 0x0000000000800000, 0xff8080ff, 0x0000ff00 , 552); 
TEST_RR_OP64_OO( 71 , smul8, 0x0080f8fa0000f5d8, 0xff3a0034, 0x80e187ce , 560); 
TEST_RR_OP64_OO( 72 , smul8, 0x0000005100000000, 0xffffff00, 0x00af0000 , 568); 
TEST_RR_OP64_OO( 73 , smul8, 0x00004000191a4000, 0x80808280, 0x0080cd80 , 576); 
TEST_RR_OP64_OO( 74 , smul8, 0x4000168000800000, 0x80b8ff00, 0x80b0808a , 584); 
TEST_RR_OP64_OO( 75 , smul8, 0x00000000021c0080, 0xff001bff, 0x00001480 , 592); 
TEST_RR_OP64_OO( 76 , smul8, 0xff93005340001e00, 0xffff8080, 0x6dad80c4 , 600); 
TEST_RR_OP64_OO( 77 , smul8, 0xc374f5800000fe00, 0x7d80ff04, 0x84150080 , 608); 
TEST_RR_OP64_OO( 78 , smul8, 0x0000008000800000, 0x80ffff00, 0x00808000 , 616); 
TEST_RR_OP64_OO( 79 , smul8, 0x000100803f800000, 0xff808100, 0xffff80ff , 624); 
TEST_RR_OP64_OO( 80 , smul8, 0x400023c400000080, 0x80930080, 0x80acffff , 632); 
TEST_RR_OP64_OO( 81 , smul8, 0x0000008040000000, 0xffff8000, 0x00808066 , 640); 
TEST_RR_OP64_OO( 82 , smul8, 0x0080000000800000, 0x8080ff29, 0xff008000 , 648); 
TEST_RR_OP64_OO( 83 , smul8, 0x1c6b000000000fe2, 0x9f000095, 0xb53400da , 656); 
TEST_RR_OP64_OO( 84 , smul8, 0x0080008000540000, 0x8080ff80, 0xffffac00 , 664); 
TEST_RR_OP64_OO( 85 , smul8, 0x00003c8000000000, 0x00870000, 0x008000c6 , 672); 
TEST_RR_OP64_OO( 86 , smul8, 0x0000000000800000, 0xff00ff00, 0x00008000 , 680); 
TEST_RR_OP64_OO( 87 , smul8, 0x0001007d00800000, 0xff838097, 0xffffff00 , 688); 
TEST_RR_OP64_OO( 88 , smul8, 0x000040000480d080, 0xff80805f, 0x0080f780 , 696); 
TEST_RR_OP64_OO( 89 , smul8, 0x0000008000010000, 0x0080ff00, 0x80ffffff , 704); 
TEST_RR_OP64_OO( 90 , smul8, 0x108b00004000ca80, 0x4d808080, 0x3700806b , 712); 
TEST_RR_OP64_OO( 91 , smul8, 0xff8b0000ded91f3e, 0xff19bba3, 0x75007baa , 720); 
TEST_RR_OP64_OO( 92 , smul8, 0x0000000000004000, 0x00d35e80, 0x80000080 , 728); 
TEST_RR_OP64_OO( 93 , smul8, 0x008000800000001e, 0x808000e2, 0xffff00ff , 736); 
TEST_RR_OP64_OO( 94 , smul8, 0x0000004f00000000, 0x80b18000, 0x00ff0000 , 744); 
TEST_RR_OP64_OO( 95 , smul8, 0x0000000000000000, 0x00800080, 0x80000000 , 752); 
TEST_RR_OP64_OO( 96 , smul8, 0xca80000140000113, 0x6bff8005, 0x80ff8037 , 760); 
TEST_RR_OP64_OO( 97 , smul8, 0x2600005c00000000, 0x80a400ba, 0xb4ffff00 , 768); 
TEST_RR_OP64_OO( 98 , smul8, 0xfc00eb12ff992100, 0x803967be, 0x08a2ff80 , 776); 
TEST_RR_OP64_OO( 99 , smul8, 0x0080000000700000, 0x8000ff00, 0xff259000 , 784); 
TEST_RR_OP64_OO( 100 , smul8, 0x1400000000800000, 0x8000ff00, 0xd8808000 , 792); 
TEST_RR_OP64_OO( 101 , smul8, 0x0000000000000000, 0x000000c6, 0x002d0000 , 800); 
TEST_RR_OP64_OO( 102 , smul8, 0x0000e4800001ffe0, 0x0037ff20, 0x8080ffff , 808); 
TEST_RR_OP64_OO( 103 , smul8, 0x4000000000000015, 0x80ff50ff, 0x800000eb , 816); 
TEST_RR_OP64_OO( 104 , smul8, 0x2c00000040002100, 0x800080be, 0xa8808080 , 824); 
TEST_RR_OP64_OO( 105 , smul8, 0x0000008000010080, 0x0080ffff, 0x80ffff80 , 832); 
TEST_RR_OP64_OO( 106 , smul8, 0x0000008000000000, 0x8dffff00, 0x0080003b , 840); 
TEST_RR_OP64_OO( 107 , smul8, 0x40000000fffc0080, 0x80ff0480, 0x8000ffff , 848); 
TEST_RR_OP64_OO( 108 , smul8, 0x0000000000000080, 0xff0000ff, 0x00860080 , 856); 
TEST_RR_OP64_OO( 109 , smul8, 0x0000000000010000, 0xe000ff00, 0x00ffff00 , 864); 
TEST_RR_OP64_OO( 110 , smul8, 0xffb4000000000000, 0x4c000000, 0xff15ff00 , 872); 
TEST_RR_OP64_OO( 111 , smul8, 0xdf00ec8000000000, 0x42800000, 0x80270bff , 880); 
TEST_RR_OP64_OO( 112 , smul8, 0x0000001e00000000, 0x00ff0000, 0x00e23e5b , 888); 
TEST_RR_OP64_OO( 113 , smul8, 0x0080000000800000, 0x8000ff8f, 0xffff8000 , 896); 
TEST_RR_OP64_OO( 114 , smul8, 0x0080eae808004000, 0xff2d8080, 0x8088f080 , 904); 
TEST_RR_OP64_OO( 115 , smul8, 0x028000000080ff83, 0xfb00ffff, 0x80ff807d , 912); 
TEST_RR_OP64_OO( 116 , smul8, 0x0000008000800000, 0x1180ff00, 0x00ff8000 , 920); 
TEST_RR_OP64_OO( 117 , smul8, 0x00000000008015ea, 0x00008037, 0xff00ff66 , 928); 
TEST_RR_OP64_OO( 118 , smul8, 0x0000000000000000, 0x004400ac, 0x39001f00 , 936); 
TEST_RR_OP64_OO( 119 , smul8, 0x4000000100000000, 0x80ffff00, 0x80ff0080 , 944); 
TEST_RR_OP64_OO( 120 , smul8, 0x0080ef8000000000, 0x80210000, 0xff800600 , 952); 
TEST_RR_OP64_OO( 121 , smul8, 0x0000000100800006, 0x00fffffa, 0xffff80ff , 960); 
TEST_RR_OP64_OO( 122 , smul8, 0x0000000040003b80, 0x00518080, 0x80008089 , 968); 
TEST_RR_OP64_OO( 123 , smul8, 0x0000000000000080, 0x000000ff, 0x2bffa180 , 976); 
TEST_RR_OP64_OO( 124 , smul8, 0x0000000100000080, 0x00ffffff, 0x80ff0080 , 984); 
TEST_RR_OP64_OO( 125 , smul8, 0x40000800ff980000, 0x80806800, 0x80f0ffb6 , 992); 
TEST_RR_OP64_OO( 126 , smul8, 0x0000d9000000ff98, 0xa74e80ff, 0x00800068 , 1000); 
TEST_RR_OP64_OO( 127 , smul8, 0x000000000080ffd6, 0xfffffff9, 0x00008006 , 1008); 
TEST_RR_OP64_OO( 128 , smul8, 0x0000000000800080, 0xf4ff80ff, 0x0000ff80 , 1016); 
TEST_RR_OP64_OO( 129 , smul8, 0x0000000000004000, 0x00008080, 0x80c90080 , 1024); 
TEST_RR_OP64_OO( 130 , smul8, 0x0000000100164000, 0x00ffff80, 0x80ffea80 , 1032); 
TEST_RR_OP64_OO( 131 , smul8, 0x40000000ffc9d580, 0x80003755, 0x80d0ff80 , 1040); 
TEST_RR_OP64_OO( 132 , smul8, 0x40000000cf802514, 0x80008071, 0x80976154 , 1048); 
TEST_RR_OP64_OO( 133 , smul8, 0x0000098000000000, 0x8080ff00, 0x00ed0080 , 1056); 
TEST_RR_OP64_OO( 134 , smul8, 0x0001ff8300010000, 0xffffff00, 0xff7dffff , 1064); 
TEST_RR_OP64_OO( 135 , smul8, 0x0000ffbe00012300, 0x00ffffba, 0xff42ff80 , 1072); 
TEST_RR_OP64_OO( 136 , smul8, 0x000040000000004d, 0x008000b3, 0x0c8080ff , 1080); 
TEST_RR_OP64_OO( 137 , smul8, 0x001b000000000000, 0xffffff80, 0xe5000000 , 1088); 
TEST_RR_OP64_OO( 138 , smul8, 0x0000000100000000, 0x00ff00a9, 0xffff7100 , 1096); 
TEST_RR_OP64_OO( 139 , smul8, 0x0000000000001800, 0x000000d0, 0x8000ff80 , 1104); 
TEST_RR_OP64_OO( 140 , smul8, 0x0000000024800000, 0x00a0b7ff, 0x00008000 , 1112); 
TEST_RR_OP64_OO( 141 , smul8, 0xd78000000000ff93, 0x80ff006d, 0x5100ffff , 1120); 
TEST_RR_OP64_OO( 142 , smul8, 0x0080000000001980, 0x800080cd, 0xff0a0080 , 1128); 
TEST_RR_OP64_OO( 143 , smul8, 0x004a000000000000, 0xb600ff7a, 0xff800000 , 1136); 
TEST_RR_OP64_OO( 144 , smul8, 0x00000000ffe00000, 0x80802000, 0x0000ffc3 , 1144); 
TEST_RR_OP64_OO( 145 , smul8, 0x0080e900ed800001, 0x808025ff, 0xff2e80ff , 1152); 
TEST_RR_OP64_OO( 146 , smul8, 0x000100010080ff8e, 0xffffffff, 0xffff8072 , 1160); 
TEST_RR_OP64_OO( 147 , smul8, 0xfff000802f400000, 0xffffa000, 0x10808200 , 1168); 
TEST_RR_OP64_OO( 148 , smul8, 0x0001000000000000, 0xff000000, 0xff001e69 , 1176); 
TEST_RR_OP64_OO( 149 , smul8, 0x00000c0000000000, 0x00800000, 0x80e81e80 , 1184); 
TEST_RR_OP64_OO( 150 , smul8, 0x0000218000010000, 0x8080ff00, 0x00bdff00 , 1192); 
TEST_RR_OP64_OO( 151 , smul8, 0xfff3008000000000, 0xffff568e, 0x0d800000 , 1200); 
TEST_RR_OP64_OO( 152 , smul8, 0x008040000000002c, 0xff8000d4, 0x808000ff , 1208); 
TEST_RR_OP64_OO( 153 , smul8, 0x000000802f803e80, 0x00ff8080, 0x8080a183 , 1216); 
TEST_RR_OP64_OO( 154 , smul8, 0x0080000000000000, 0x80000800, 0xff710080 , 1224); 
TEST_RR_OP64_OO( 155 , smul8, 0x4000c78000800080, 0x80808080, 0x8071ffff , 1232); 
TEST_RR_OP64_OO( 156 , smul8, 0xfff7000100000001, 0x09ff55ff, 0xffff00ff , 1240); 
TEST_RR_OP64_OO( 157 , smul8, 0xd680400000800000, 0x8080ff80, 0x53808000 , 1248); 
TEST_RR_OP64_OO( 158 , smul8, 0x00000007fb00c600, 0x00f90a80, 0xc9ff8074 , 1256); 
TEST_RR_OP64_OO( 159 , smul8, 0x0000005b00000000, 0x00a50014, 0x00ff0000 , 1264); 
TEST_RR_OP64_OO( 160 , smul8, 0x0000000000000044, 0xff8000bc, 0x000080ff , 1272); 
TEST_RR_OP64_OO( 161 , smul8, 0x0001003600800080, 0xffff8080, 0xffcaffff , 1280); 
TEST_RR_OP64_OO( 162 , smul8, 0x0000008000000000, 0x00ff0000, 0x9f80ff00 , 1288); 
TEST_RR_OP64_OO( 163 , smul8, 0x109f000140000080, 0xdbff80ff, 0x8dff8080 , 1296); 
TEST_RR_OP64_OO( 164 , smul8, 0x00000080e1d90010, 0x00ffa3f0, 0xff8053ff , 1304); 
TEST_RR_OP64_OO( 165 , smul8, 0x0000000000000001, 0x800000ff, 0x000080ff , 1312); 
TEST_RR_OP64_OO( 166 , smul8, 0x0080005eea580080, 0x80ff4280, 0xffa2acff , 1320); 
TEST_RR_OP64_OO( 167 , smul8, 0x000000800080fe9e, 0x3efffffa, 0x0080803b , 1328); 
TEST_RR_OP64_OO( 168 , smul8, 0x0240000040000001, 0x098080ff, 0x400080ff , 1336); 
TEST_RR_OP64_OO( 169 , smul8, 0x00000000f576fff0, 0x0000b910, 0x008026ff , 1344); 
TEST_RR_OP64_OO( 170 , smul8, 0x400000d0c0800080, 0x801a8080, 0x80087fff , 1352); 
TEST_RR_OP64_OO( 171 , smul8, 0x008002e500000001, 0xfff300ff, 0x80c700ff , 1360); 
TEST_RR_OP64_OO( 172 , smul8, 0x1800c88000000080, 0xd06fffff, 0x80800080 , 1368); 
TEST_RR_OP64_OO( 173 , smul8, 0x0000000000000000, 0x000021ff, 0x00800000 , 1376); 
TEST_RR_OP64_OO( 174 , smul8, 0x006500000026ff90, 0xff00da90, 0x9b00ff01 , 1384); 
TEST_RR_OP64_OO( 175 , smul8, 0x0000400000000001, 0x008000ff, 0xff8080ff , 1392); 
TEST_RR_OP64_OO( 176 , smul8, 0x10c2400000000000, 0xc980ffff, 0xb2800000 , 1400); 
TEST_RR_OP64_OO( 177 , smul8, 0x000040000b9aec3c, 0x0080216e, 0x6c805ad2 , 1408); 
TEST_RR_OP64_OO( 178 , smul8, 0x0000000000010000, 0xff00ff07, 0x0080ff00 , 1416); 
TEST_RR_OP64_OO( 179 , smul8, 0x2f80000000804000, 0xa1ffff80, 0x80008080 , 1424); 
TEST_RR_OP64_OO( 180 , smul8, 0x40000000d7800080, 0x80005180, 0x80ff80ff , 1432); 
TEST_RR_OP64_OO( 181 , smul8, 0xeeb30000ea000001, 0x670080ff, 0xd5002cff , 1440); 
TEST_RR_OP64_OO( 182 , smul8, 0x0080000000000000, 0xff000000, 0x80170000 , 1448); 
TEST_RR_OP64_OO( 183 , smul8, 0x0000349600000080, 0xff8180ff, 0x00960080 , 1456); 
TEST_RR_OP64_OO( 184 , smul8, 0x00011800e9802f80, 0xff802da1, 0xffd08080 , 1464); 
TEST_RR_OP64_OO( 185 , smul8, 0x1b80000018004000, 0x8031d080, 0xc9008080 , 1472); 
TEST_RR_OP64_OO( 186 , smul8, 0x00001b80ff981800, 0xfe80ffd0, 0x00c96880 , 1480); 
TEST_RR_OP64_OO( 187 , smul8, 0xf7000001006b0000, 0x80ff9500, 0x12ffff00 , 1488); 
TEST_RR_OP64_OO( 188 , smul8, 0x0000400000010080, 0x0080ffff, 0xff80ff80 , 1496); 
TEST_RR_OP64_OO( 189 , smul8, 0x0d000000c200f274, 0x800080bc, 0xe6947c33 , 1504); 
TEST_RR_OP64_OO( 190 , smul8, 0xff220000ce000000, 0x03008000, 0xb6006480 , 1512); 
TEST_RR_OP64_OO( 191 , smul8, 0x0080000100520000, 0x80ffae00, 0xffffff00 , 1520); 
TEST_RR_OP64_OO( 192 , smul8, 0x0001000000434000, 0xffffbd80, 0xff00ff80 , 1528); 
TEST_RR_OP64_OO( 193 , smul8, 0x0001d70000000001, 0xff8080ff, 0xff5200ff , 1536); 
TEST_RR_OP64_OO( 194 , smul8, 0x0000ffa600000000, 0x805a009c, 0x00ff0000 , 1544); 
TEST_RR_OP64_OO( 195 , smul8, 0x00002a0000800025, 0x00ac80ff, 0x8080ffdb , 1552); 
TEST_RR_OP64_OO( 196 , smul8, 0x0000000000800080, 0xc8ff8080, 0x0000ffff , 1560); 
TEST_RR_OP64_OO( 197 , smul8, 0x4000001200004000, 0x80ff0080, 0x80ee8080 , 1568); 
TEST_RR_OP64_OO( 198 , smul8, 0xff9d000040000080, 0xff008080, 0x63ff80ff , 1576); 
TEST_RR_OP64_OO( 199 , smul8, 0x0000d10000490000, 0x005effff, 0xff80b700 , 1584); 

  #-------------------------------------------------------------
  # Bypassing tests
  #-------------------------------------------------------------


TEST_PASSFAIL

RV_COMPLIANCE_CODE_END

.data

RV_COMPLIANCE_DATA_BEGIN
test_res:
    .fill 398, 4, -1
RV_COMPLIANCE_DATA_END